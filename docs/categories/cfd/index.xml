<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Cfd on Andrew Moa Blog Site</title>
    <link>https://andrewmoa.site/categories/cfd/</link>
    <description>Recent content in Cfd on Andrew Moa Blog Site</description>
    <generator>Hugo</generator>
    <language>en-US</language>
    <managingEditor>andrew.moa2005@163.com (Andrew Moa)</managingEditor>
    <webMaster>andrew.moa2005@163.com (Andrew Moa)</webMaster>
    <copyright>Andrew Moa</copyright>
    <lastBuildDate>Tue, 22 Apr 2025 00:00:00 +0000</lastBuildDate>
    <atom:link href="https://andrewmoa.site/categories/cfd/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Coding STAR-CCM&#43; simulation assistant using VSCode</title>
      <link>https://andrewmoa.site/post/2025-04-22-use-vscode-coding-starccm-assistant/</link>
      <pubDate>Tue, 22 Apr 2025 00:00:00 +0000</pubDate><author>andrew.moa2005@163.com (Andrew Moa)</author>
      <guid>https://andrewmoa.site/post/2025-04-22-use-vscode-coding-starccm-assistant/</guid>
      <description>&lt;p&gt;The STAR-CCM+ Simulation Assistant is equivalent to a plug-in that encapsulates Java macro commands. By calling macro commands, some procedural operations are performed. Compared with directly executing Java macro files, it can interact with users better and is obviously more friendly to users who are not familiar with Java. Because the simulation assistant is mostly used in pre- and post-processing, many consulting companies tend to adopt the same approach when developing customized plug-ins for this purpose.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Debug STAR-CCM&#43; macros with VSCode</title>
      <link>https://andrewmoa.site/post/2025-04-18-use-vscode-debug-starccm-marco/</link>
      <pubDate>Fri, 18 Apr 2025 00:00:00 +0000</pubDate><author>andrew.moa2005@163.com (Andrew Moa)</author>
      <guid>https://andrewmoa.site/post/2025-04-18-use-vscode-debug-starccm-marco/</guid>
      <description>&lt;p&gt;As mentioned earlier, the recording and writing of STAR-CCM+ macro files are essentially Java files, so it can be developed and debugged using Java programming methods. If complex business scenarios are involved, additional functions need to be added. The program itself is relatively complex, and it is difficult to wait until the entire program is written before testing it. It is inevitable to debug during the development process. The development tool used by the official document is the old version of &lt;strong&gt;NetBeans&lt;/strong&gt;. Many functions have changed. In addition, the official document description is too simple. Most people are still confused about the debugging process of STAR-CCM+ after reading it.&lt;a href=&#34;https://code.visualstudio.com/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;&lt;strong&gt;VSCode&lt;/strong&gt;&lt;/a&gt;&#xA; As a leader in emerging IDE, you can not only support Java programming through expansion, but also &lt;a href=&#34;https://copilot.microsoft.com/chats/Uz4t8yZbNmpyo1CVtqKWP&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;&lt;strong&gt;copilot&lt;/strong&gt;&lt;/a&gt;&#xA; To expand the integrated powerful AI programming capabilities, this article uses &lt;strong&gt;VSCode&lt;/strong&gt; to demonstrate the debugging process of STAR-CCM+ macro files.&lt;/p&gt;</description>
    </item>
    <item>
      <title>STAR-CCM&#43; macro file recording and writing</title>
      <link>https://andrewmoa.site/post/2025-04-17-starccm-record-and-write-marco/</link>
      <pubDate>Thu, 17 Apr 2025 00:00:00 +0000</pubDate><author>andrew.moa2005@163.com (Andrew Moa)</author>
      <guid>https://andrewmoa.site/post/2025-04-17-starccm-record-and-write-marco/</guid>
      <description>&lt;p&gt;STAR-CCM+ macro is essentially a java file, and the syntax is no different from ordinary java. Using macros can help us simplify the processing process, especially some repetitive process operations. Completing some process operations by writing macro files can greatly liberate human resources, and even complete certain operations during the solution process.&lt;/p&gt;&#xA;&lt;h2 id=&#34;1-record-macros&#34;&gt;1. Record macros&lt;/h2&gt;&#xA;&lt;p&gt;The essence of STAR-CCM+ macro is a collection of various operation commands in the analysis process. Instead of explaining the complex and cumbersome java syntax + API from scratch, it is better to start with engineering issues directly.&lt;/p&gt;</description>
    </item>
    <item>
      <title>OpenFOAM compiles and installs cfmesh and ccm tools</title>
      <link>https://andrewmoa.site/post/2025-03-27-openfoam-compile-install-cfmesh-and-ccmtool/</link>
      <pubDate>Thu, 27 Mar 2025 00:00:00 +0000</pubDate><author>andrew.moa2005@163.com (Andrew Moa)</author>
      <guid>https://andrewmoa.site/post/2025-03-27-openfoam-compile-install-cfmesh-and-ccmtool/</guid>
      <description>&lt;h2 id=&#34;1-compile-cfmesh&#34;&gt;1. Compile cfmesh&lt;/h2&gt;&#xA;&lt;p&gt;The early compiled and installed OpenFOAM version of com, with the version number v2412, and there is no source code with cfmesh.&#xA;According to the official documentation, you need to manually download the source code file of cfmesh:&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-Bash&#34; data-lang=&#34;Bash&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;nb&#34;&gt;cd&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;$WM_PROJECT_DIR&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;git submodule update --init --recursive plugins/cfmesh&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;The following error occurs:&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-Bash&#34; data-lang=&#34;Bash&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;fatal: fatal: not a git repository &lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;or any of the parent directories&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt;: .git&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Okay, let&amp;rsquo;s try another approach. Download the source code directly through git to the specified folder, folder and URL path to view it &lt;code&gt;.gitmodules&lt;/code&gt; document:&lt;/p&gt;</description>
    </item>
    <item>
      <title>Slurm submits Fluent and CFX calculation scripts</title>
      <link>https://andrewmoa.site/post/2025-03-26-slurm-submit-fluent-and-cfx-script/</link>
      <pubDate>Wed, 26 Mar 2025 00:00:00 +0000</pubDate><author>andrew.moa2005@163.com (Andrew Moa)</author>
      <guid>https://andrewmoa.site/post/2025-03-26-slurm-submit-fluent-and-cfx-script/</guid>
      <description>&lt;h2 id=&#34;1-fluent&#34;&gt;1. Fluent&lt;/h2&gt;&#xA;&lt;p&gt;First, write the Fluent jou script:&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-text&#34; data-lang=&#34;text&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;/file/read-case &amp;#34;small_fan.cas.h5&amp;#34; &#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;/solve/initialize/hyb-initialization &#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;/solve/iterate 100 &#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;/file/write-case &amp;#34;small_fan_results.cas.h5&amp;#34; ok &#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;/file/write-data &amp;#34;small_fan_results.dat.h5&amp;#34; ok &#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;/exit ok &#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;This jou file is very simple. It tells Fluent which file to read, how to initialize, how many steps to iterate, and how to save until the final exit.&#xA;If the calculation is more complicated, such as involving UDF loading or special condition initialization settings, you need to add corresponding command lines.&#xA;If you are not familiar with how to write TUI commands, you can record scripts through the command line window under the Fluent graphical interface.&lt;/p&gt;</description>
    </item>
    <item>
      <title>PowerShell编写STAR-CCM&#43;自动排队计算脚本</title>
      <link>https://andrewmoa.site/post/2025-03-25-posershell-starccm-script/</link>
      <pubDate>Tue, 25 Mar 2025 00:00:00 +0000</pubDate><author>andrew.moa2005@163.com (Andrew Moa)</author>
      <guid>https://andrewmoa.site/post/2025-03-25-posershell-starccm-script/</guid>
      <description>&lt;p&gt;When I used STAR-CCM+ to do calculations on a Windows workstation, sometimes I had to submit more than ten or twenty computing tasks in one night. Of course, it was impossible to run more than ten tasks at the same time, and it was impossible to watch it run and submit them manually one by one. A few years ago, I wrote this simple queue calculation template using PowerShell, and I share it with you here.&lt;/p&gt;</description>
    </item>
  </channel>
</rss>
