<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Fortran on Andrew Moa Blog Site</title>
    <link>https://andrewmoa.site/tags/fortran/</link>
    <description>Recent content in Fortran on Andrew Moa Blog Site</description>
    <generator>Hugo</generator>
    <language>en-US</language>
    <managingEditor>andrew.moa2005@163.com (Andrew Moa)</managingEditor>
    <webMaster>andrew.moa2005@163.com (Andrew Moa)</webMaster>
    <copyright>Andrew Moa</copyright>
    <lastBuildDate>Tue, 22 Jul 2025 16:58:14 +0800</lastBuildDate>
    <atom:link href="https://andrewmoa.site/tags/fortran/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Matrix multiplication operation (Ⅲ) - using MPI parallel acceleration</title>
      <link>https://andrewmoa.site/post/2025-06-25-matrix_multiplication-3/</link>
      <pubDate>Wed, 25 Jun 2025 00:00:00 +0000</pubDate><author>andrew.moa2005@163.com (Andrew Moa)</author>
      <guid>https://andrewmoa.site/post/2025-06-25-matrix_multiplication-3/</guid>
      <description>&lt;p&gt;MPI is a parallel computing protocol and is currently the most commonly used interface program for high-performance computing clusters. MPI communicates through inter-process messages and can call multiple cores across nodes to perform parallel computing, which is not available in OpenMP. MPI is implemented on different platforms, such as MS-MPI and Intel MPI under Windows, OpenMPI and MPICH under Linux, etc.&lt;/p&gt;&#xA;&lt;h2 id=&#34;1-mpi-parallel-acceleration-loop-calculation&#34;&gt;1. MPI parallel acceleration loop calculation&lt;/h2&gt;&#xA;&lt;h3 id=&#34;11-c-implementation&#34;&gt;1.1 C Implementation&lt;/h3&gt;&#xA;&lt;p&gt;MPI needs to initialize the main program interface and establish a message broadcast mechanism; at the same time, the array to be calculated is divided and broadcast to different processes. In the past, these operations were implemented internally by OpenMP or other parallel libraries, and programmers did not need to care about how the underlying implementation was implemented. However, using MPI requires programmers to manually allocate the global and local space of each process and control the broadcast of each message, which undoubtedly increases the additional learning cost.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Matrix multiplication operation (I) - using OpenMP to speed up loop calculation</title>
      <link>https://andrewmoa.site/post/2025-06-23-matrix_multiplication-1/</link>
      <pubDate>Mon, 23 Jun 2025 00:00:00 +0000</pubDate><author>andrew.moa2005@163.com (Andrew Moa)</author>
      <guid>https://andrewmoa.site/post/2025-06-23-matrix_multiplication-1/</guid>
      <description>&lt;p&gt;Speaking of matrices, anyone who studies science and engineering will think of the fear of being dominated by linear algebra classes. Matrix multiplication operations are indispensable for various industrial and scientific research numerical calculations, and are also used in various benchmarking software. The time consumption of matrix multiplication operations is also an important indicator for judging the floating-point operation performance of computers. The purpose of this article is to verify the performance differences of various implementation methods through matrix multiplication operations, and compare the performance differences of different computing platforms to provide a reference for high-performance computing development.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Use VSCode to develop STAR-CCM&#43; user library: build dynamic link library through Fortran</title>
      <link>https://andrewmoa.site/post/2025-04-30-use-vscode-develop-starccm-user-library-by-fortran/</link>
      <pubDate>Wed, 30 Apr 2025 00:00:00 +0000</pubDate><author>andrew.moa2005@163.com (Andrew Moa)</author>
      <guid>https://andrewmoa.site/post/2025-04-30-use-vscode-develop-starccm-user-library-by-fortran/</guid>
      <description>&lt;p&gt;Although the official STAR-CCM+ documentation specifically states that FORTRAN is not supported under Windows&lt;sup id=&#34;fnref:1&#34;&gt;&lt;a href=&#34;#fn:1&#34; class=&#34;footnote-ref&#34; role=&#34;doc-noteref&#34;&gt;1&lt;/a&gt;&lt;/sup&gt;. But in fact, as long as the compiler supports it, user library compiled using Fortran under Windows can be loaded and run normally in STAR-CCM+.&lt;/p&gt;&#xA;&lt;h2 id=&#34;1-build-cmake-project&#34;&gt;1. Build CMake Project&lt;/h2&gt;&#xA;&lt;p&gt;First, we refer to the tutorial case in the official documentation &lt;sup id=&#34;fnref:2&#34;&gt;&lt;a href=&#34;#fn:2&#34; class=&#34;footnote-ref&#34; role=&#34;doc-noteref&#34;&gt;2&lt;/a&gt;&lt;/sup&gt; and build a CMake project. The project structure is as follows:&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-powershell&#34; data-lang=&#34;powershell&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;n&#34;&gt;STARCCM_FORTRAN_SAMPLE&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;err&#34;&gt;│&lt;/span&gt;   &lt;span class=&#34;n&#34;&gt;CMakeLists&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;py&#34;&gt;txt&lt;/span&gt;&#x9;&lt;span class=&#34;c&#34;&gt;# CMake Configuration File&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;err&#34;&gt;│&lt;/span&gt;   &lt;span class=&#34;n&#34;&gt;README&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nb&#34;&gt;md&#x9;&lt;/span&gt;&lt;span class=&#34;c&#34;&gt;# Description document, not required&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;err&#34;&gt;├───&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;py&#34;&gt;vscode&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;err&#34;&gt;│&lt;/span&gt;      &lt;span class=&#34;n&#34;&gt;launch&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;py&#34;&gt;json&lt;/span&gt;&#x9;&lt;span class=&#34;c&#34;&gt;# Automatically generated file when starting debug mode, not required&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;err&#34;&gt;│&lt;/span&gt;      &lt;span class=&#34;n&#34;&gt;settings&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;py&#34;&gt;json&lt;/span&gt;&#x9;&lt;span class=&#34;c&#34;&gt;# Define CMake related variables&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;err&#34;&gt;└───&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;src&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;        &lt;span class=&#34;n&#34;&gt;initVelocity&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;py&#34;&gt;f&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;        &lt;span class=&#34;n&#34;&gt;StarReal&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;py&#34;&gt;f&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;in&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;        &lt;span class=&#34;n&#34;&gt;sutherlandViscosity&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;py&#34;&gt;f&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;        &lt;span class=&#34;n&#34;&gt;uflib&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;py&#34;&gt;f&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;        &lt;span class=&#34;n&#34;&gt;zeroGradT&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;py&#34;&gt;f&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;The main content of CMake configuration file &lt;code&gt;CMakeLists.txt&lt;/code&gt; is as follows:&lt;/p&gt;</description>
    </item>
  </channel>
</rss>
